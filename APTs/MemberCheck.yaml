filename: MemberCheck.py
name: MemberCheck
description: ''
tags:
  - TAG1
  - TAG2
  - Required
lang: python
initial: "def whosDishonest(club1, club2, club3):\n\t\"\"\"\n\treturn sorted list of Strings, the names\n\tthat appear in more than one of the\n\tString lists club1, club2, club3\n\t\"\"\"\n\t\n\t# write code here"
problem: |-
  A health club chain allows its members to visit any of its many health
  club locations an unlimited number of times per day. The only
  constraining rule is, a customer can only visit one health club
  location per day, even though he or she may return to that location
  an unlimited number of times for the rest of that day.

  Although the honor system has always worked quite well, the club wants
  to run some tests to see how many people really follow the
  rules. You are to write a program that takes the entrance log files
  from three different clubs (all logging the same day) and return a
  sorted list of the people who are not honest and went to more than
  one health club location in the same day.


  The log files are represented as lists of <code>String</code>'s
  where each element is the
  member name of a customer who entered that day. For example, if a
  customer showed up three times to one of the club locations that
  day, the member's name would appear three times in the corresponding
  list of Strings.

  <h3>Notes</h3>
  <UL>
  <LI> <code>club1</code>, <code>club2</code>, and <code>club3</code>
  may contain a different number of elements.

  <LI> The same member name can appear multiple times in a single log file.
  <LI> The elements of the returned <code>String</code> list
  should be sorted in
  lexicographic order (the order they would appear in a dictionary).

  <LI> Assume that two people with the same name are in fact the same person.
  </UL>
constraints: >-
  <ul>

  <LI> <code>club1</code>, <code>club2</code>, and <code>club3</code> each have
  between 1 and 50 elements,

  inclusive.


  <LI> Each element of <code>club1</code>, <code>club2</code>, and
  <code>club3</code> contains between 1 and 50 characters, inclusive.

  <LI> Each element of <code>club1</code>, <code>club2</code>, and
  <code>club3</code> consists only of uppercase letters ('A'-'Z').

  </ul>
examples: >-
  <ol>

  <li class="example-odd">

  <PRE>

  ["JOHN","JOHN","FRED","PEG"]

  ["PEG","GEORGE"]

  ["GEORGE","DAVID"]

  </PRE>


  Returns: <code>[ "GEORGE",  "PEG" ]</code>


  "PEG" went to club1 and club2, and "GEORGE" went to club2 and club3.


  </PRE>


  <li class="example-even">

  <PRE>

  ["DOUG","DOUG","DOUG","DOUG","DOUG"]

  ["BOBBY","BOBBY"]

  ["JAMES"]

  </PRE>

  Returns: <code>[ ]</code>


  Here, no one went to more than one club location.


  <li class="example-odd">

  <PRE>

  ["BOBBY"]

  ["BOB","BOBBY"]

  ["BOB"]

  </PRE>


  Returns: <code>[ "BOB",  "BOBBY" ]</code>


  Note that "BOB" is sorted before "BOBBY"


  <li class="example-even">

  <PRE>

  ["BOBBY","HUGH","LIZ","GEORGE"]

  ["ELIZABETH","WILL"]

  ["BOB","BOBBY","BOBBY","PAM","LIZ","BOBBY","BOBBY","WILL"]

  </PRE>


  Returns: <code>[ "BOBBY",  "LIZ",  "WILL" ]</code>


  <li class="example-odd">

  <PRE>

  ["JAMES","HUGH","HUGH","GEORGE","ELIZABETH","ELIZABETH","HUGH",

  "DAVID","ROBERT","DAVID","BOB","BOBBY","PAM","JAMES","JAMES"]

  ["BOBBY","ROBERT","GEORGE","JAMES","PEG","JAMES","DAVID","JOHN","LIZ",

  "SANDRA","GEORGE","JOHN","GEORGE","ELIZABETH","LIZ","JAMES"]

  ["ROBERT","ROBERT","ROBERT","SANDRA","PAM","BOB","LIZ","GEORGE"]

  </PRE>


  Returns: <code>[
  "BOB","BOBBY","DAVID","ELIZABETH","GEORGE","JAMES","LIZ","PAM","ROBERT",
  "SANDRA" ]</code>



  <li class="example-even">

  <PRE>

  ["LIZ","WILL","JAMES"]

  ["JOHN","ROBERT","GEORGE","LIZ","PEG","HUGH","BOB","BOBBY","ROBERT","ELIZABETH","DAVID"]

  ["PAM","DAVID","SANDRA","GEORGE","JOHN","ROBERT","SANDRA","GEORGE"]

  </PRE>


  Returns: <code>[ "DAVID",  "GEORGE",  "JOHN",  "LIZ",  "ROBERT" ]</code>


  <li class="example-odd">

  <PRE>

  ["PEG","ROBERT","PAM","JOHN","DAVID","JOHN","ROBERT",

  "GEORGE","HUGH","WILL","JAMES","JAMES","BOBBY","BOBBY","SANDRA"]


  ["SANDRA","BOB","PAM","JAMES","WILL","DAVID","BOBBY","GEORGE",

  "WILL","LIZ","BOBBY","ROBERT","WILL","BOB","BOBBY","ELIZABETH","HUGH"]


  ["WILL","PEG","ELIZABETH","DAVID","HUGH","BOBBY","JOHN","SANDRA","ELIZABETH",

  "ELIZABETH","SANDRA","GEORGE","PAM","ELIZABETH","BOBBY","DAVID","PAM"]

  </PRE>


  Returns:

  <PRE>

  [ "BOBBY",

  "DAVID",

  "ELIZABETH",

  "GEORGE",

  "HUGH",

  "JAMES",

  "JOHN",

  "PAM",

  "PEG",

  "ROBERT",

  "SANDRA",

  "WILL" ]

  </PRE>


  <li class="example-even">

  <PRE>

  ["AHHOZY","AHHAPLL","ASNV"]


  ["AHDLTOE","AHUKPJ","AHDENCTPP","AHDENCJ","AHDLNZC","AHDLTOGG","AHHAPMBG",

  "ALE","AHBHA","AHUKP","AHDQMILLP","AHDENEDY","AHDENEE","AHHOHVCX","AHISK",

  "AHW","AQDB","AHUP","AQDBNPU","AGWZUV","AHHOSUW","AHXS","AHDENCP","AHDQM",

  "AHDLTURV","AHBHVV","AHDQMILL","AHDQMD","AHH","AHDLTU","AHISFNO","AHURF",

  "AH","AHHAPNQ","AQPL","AHDXL","AHDLTUGX","AHDLT","AHUKRC","AHDLTUGX",

  "AQDTXYX","AGWZS"]


  ["AHHAPMFF","AHURA","AHHOZ","AHISKH","AHUPR","AHHAPM","AHUKRHIN","AHHAP",

  "AHDLTMO","AHDLTUJ","AHDQY","AHUK","AHDENEDY","AHWK","AHHOZGJJ","AHXS",

  "AHDLTUREL","AHHOZQNL","AHHOSUWOS"]

  </PRE>


  Returns: <code>[ "AHDENEDY",  "AHXS" ]</code>

  </ol>
copyright: |-
  This problem statement is the exclusive and proprietary property of
  TopCoder, Inc. Any unauthorized use or reproduction of this information
  without the prior written consent of TopCoder, Inc. is strictly
  prohibited. &copy;2002, TopCoder, Inc. All rights reserved.
