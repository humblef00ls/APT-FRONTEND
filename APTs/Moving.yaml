filename: Moving.py
name: Moving
description: ''
lang: python
initial: "def boxes(items, weights, n):\n\t'''\n\titems (list of str) - List of item names\n\tweights (list of int) - List where the kth element is the weight of the\n\tkth item in the list items\n\tn (int) - Number of boxes to pack the items into\n\t\n\tReturn a list of strings where each string represents the items to pack in\n\tthat box.\n\t'''\n\treturn []"
problem: >-
  To make packing faster you've decided to implement the function

  <code>boxes</code> that tells you what item goes in which box and the

  order to put the items in (heaviest first). You have a list of

  <code>items</code> and a parallel list of <code>weights</code>, where

  the k<sup>th</sup> item in <code>items</code> has the k<sup>th</sup> weight in

  <code>weights</code>. You must use <code>n</code> boxes to pack things.



  When choosing which of <code>n</code> boxes to put an item in, you

  always choose the <em>lightest/least heavy</em> box, even if it has

  more items in it. You put items into each box in order of individual

  items from heaviest to lightest. First put the heaviest item in the

  lightest box, then the next heaviest item in the lightest box, and so

  on. See below for tie-breaking information.



  The function returns a list of strings, where each string represents a

  single box of all the items that go in it, separated by a single

  space. In each single box (a string) the space-separated items are listed from
  heavest to

  lightest.  The list of strings returned is in alphabetical order.




  To create your return value, first sort the items by weight with

  heaviest first, break ties alphabetically. For example, a

  <em>book</em> with

  weight 2, a <em>doll</em> with weight 1, and a

  <em>car</em> with weight 1 would be

  ordered <em>book</em>, <em>car</em>, and <em>doll</em>

  because the book is the heaviest and although

  car and doll weigh the same, car comes before doll

  alphabetically. Process these weighted items in order,

  always putting the next

  heaviest item in the box that is the lightest. If there is more than

  one box that is the lightest, use the first one in your list you're returning.
constraints: |-
  <ul>
  <li><code>len(items) == len(weights)</code>
  <li><code>n <= len(items)</code>
  <Li> There will be no more than 50 elements in the list parameters.
  </ul>
examples: >-
  <ol>


  <li class="example-odd">

  <PRE>

  items = ['pens', 'mug', 'book']

  weights = [1, 3, 2]

  n = 3


  Returns ['book', 'mug', 'pens']

  </PRE>

  # When we order the items by weight we get <code>['mug', 'book',
  'pens']</code>, then we put them in our boxes to get the list <code>['mug',
  'book', 'pens']</code>, finally we return <code>['book', 'mug', 'pens']</code>
  because that is in alphabetical order.



  <li class="example-even">

  <PRE>

  items = ['fan', 'ball', 'book']

  weights = [1, 2, 3]

  n = 2


  Returns ['ball fan', 'book']

  </PRE>

  # When we order the items by weight we get <code>['book', 'ball',
  'fan']</code>, then we put them in our boxes to get the list <code>['book',
  'ball fan']</code>, finally we return <code>['ball fan', 'book']</code>
  because that is in alphabetical order.



  <li class="example-odd">

  <PRE>

  items = ['barbie', 'bear', 'car', 'ball']

  weights = [1, 1, 1, 1]

  n = 2


  Returns ['ball bear', 'barbie car']

  </PRE>

  # When we order the items by weight we get <code>['ball', 'barbie', 'bear',
  'car']</code>, then we put them in our boxes to get the list <code>['ball
  bear', 'barbie car']</code>, finally we return <code>['ball bear', 'barbie
  car']</code> because that is in alphabetical order.


  <li class="example-even">

  <PRE>

  items = ['picture', 'fan', 'bear', 'candle', 'doll']

  weights = [3, 2, 4, 4, 3]

  n = 4


  Returns ['bear', 'candle', 'doll fan', 'picture']

  </PRE>

  # When we order the items by weight we get <code>['bear', 'candle', 'doll',
  'picture', 'fan']</code>, then we put them in our boxes to get the list
  <code>['bear', 'candle', 'doll fan', 'picture']</code>, finally we return
  <code>['bear', 'candle', 'doll fan', 'picture']</code> because that is in
  alphabetical order.

  </ol>
copyright: >-
  <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/">

  <img alt="Creative Commons License" style="border-width:0"
  src="http://i.creativecommons.org/l/by-sa/3.0/88x31.png"></a>

  <br/>

  This work is copyright &copy; Kristin Stephens-Martinez and is licensed under
  a <a rel="license"
  href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons
  Attribution-Share Alike 3.0 Unported License</a>.
formName: moving
