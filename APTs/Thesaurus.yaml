filename: Thesaurus.py
name: Thesaurus
description: ''
tags:
  - TAG1
  - TAG2
  - Required
lang: python
initial: "def edit(entry) :\n\t\"\"\"\n\tReturn list of String values based on\n\tentry (list of Strings) as\n\tdescribed below\n\t\"\"\"\n\t\n\t# you write code here"
problem: >-
  An entry in a Thesaurus is a list of words that are all synonyms. Each

  entry contains no duplicates within it. It is possible that two entries

  might have some common words, but the editors (who are somewhat cheap)

  have decided that if any two entries have 2 or more words in common then

  they should be combined into a single entry.



  This editing process may produce new entries which can be combined. The

  final Thesaurus must contain no pair of entries that have 2 or more

  words in common. Of course, each entry must contain no duplicates.



  Create a file Thesaurus.py that contains a method edit that is passed

  <code>entry</code> (a list of String values),

  the entries in the original Thesaurus. The method

  returns the edited Thesaurus as a list of Strings. Each element of entry has
  no

  leading or trailing spaces and has its words separated by a single

  space. Each element of the return should also have no leading or

  trailing spaces and have its words separated by a single space. In

  addition, the words within each element of the return must be in

  alphabetical order, and the elements in the return must appear in

  alphabetical order.
constraints: |-
  <ul>
  <LI> entry will contain between 1 and 50 elements inclusive.

  <LI> Each element of entry will contain between 1 and 50 characters inclusive.

  <LI> Each element of entry will consist of 1 or more "words" separated
  by single spaces.

  <LI> Each element of entry will contain no leading or trailing spaces.

  <LI> Each "word" will consist of 1 or more lowercase letters 'a'-'z'

  <LI> No element of entry will contain two identical words.
  </ul>
examples: >-
  <ol>

  <li class="example-odd">

  <pre>

  ["ape monkey wrench", "wrench twist strain"]


  Returns: [ "ape monkey wrench",  "strain twist wrench" ]

  </PRE>

  These two entries have only one common word so they cannot be

  combined. After rearranging the words within each entry to put the words

  into alphabetical order, the first entry is first alphabetically.


  <li class="example-even">

  <PRE>

  ["ape monkey wrench", "wrench twist strain", "monkey twist frugue"]


  Returns: [ "ape monkey wrench",  "frugue monkey twist",  "strain twist wrench"
  ]

  </PRE>

  No entries could be combined, but two had to be arranged, and the order

  was changed.


  <li class="example-odd">

  <PRE>

  ["ape monkey wrench", "wrench twist strain", "monkey twist frugue strain"]


  Returns: [ "ape frugue monkey strain twist wrench" ]

  </PRE>

  The first two entries could not be combined, but the last two

  could. After they were combined, the first entry shared both "wrench"

  and "monkey" with the new combined entry, so we ended up with just one

  entry.



  <li class="example-even">

  <pre>

  ["point run score","point dot","cut run tear score","cut valley","cute
  pretty"]


  Returns: [ "cut point run score tear",  "cut valley",  "cute pretty",  "dot
  point" ]

  </PRE>

  </ol>
copyright: |-
  This problem statement is the exclusive and proprietary property of
  TopCoder, Inc. Any unauthorized use or reproduction of this information
  without the prior written consent of TopCoder, Inc. is strictly
  prohibited. (c)2004, TopCoder, Inc. All rights reserved.</em>
